@page "/"
@using System.Text.Json.Serialization
@using Blazored.LocalStorage
@using Newtonsoft.Json
@inject ILocalStorageService localStorage
<div class="container">
    <div class="row">
        <div class="card">
            <div class="card-header">Product Count: @ProductCount </div>
            <div class="card-body" style="max-height:50vh; overflow-y:scroll;">
                @if (Products.Count > 0)
                {
                    foreach (var item in Products)
                    {
                        <div class="col-auto m-2">
                            <div class="card">
                                <div class="card-header">@item.Name</div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

    </div>
    <div class="row col-auto card mt-5">
        <div class="form-group">
            <label class="form-label"> Name</label>
            <InputText @bind-Value="Product.Name"></InputText>
            <button class="mt-2 btn btn-primary" @onclick="AddProduct">Add Product</button>
        </div>
    </div>
</div>


@code {
    public Product Product { get; set; } = new();
    public int ProductCount { get; set; }
    public List<Product> Products { get; set; } = new();

    private async Task AddProduct()
    {
        List<Product> LocalProducts;
        var stringProducts = await localStorage.GetItemAsStringAsync("Products");
        if (string.IsNullOrEmpty(stringProducts))
        {
            LocalProducts = new List<Product>();
        }
        else
        {
            LocalProducts = JsonConvert.DeserializeObject<List<Product>>(stringProducts)!;
        }

        Product.Id = Products.Count + 1;
        LocalProducts.Add(Product);
        await localStorage.RemoveItemAsync("Products");
        string serializeProducts = JsonConvert.SerializeObject(LocalProducts);
        await localStorage.SetItemAsStringAsync("Products", serializeProducts);

        ProductCount = LocalProducts.Count;
        Products = LocalProducts;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var stringProducts = await localStorage.GetItemAsStringAsync("Products");
        if (!string.IsNullOrEmpty(stringProducts))
            Products = JsonConvert.DeserializeObject<List<Product>>(stringProducts)!;

        ProductCount = Products.Count;
        StateHasChanged();
    }

}

